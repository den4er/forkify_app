"use strict";

require("core-js/modules/web.immediate.js");

var model = _interopRequireWildcard(require("./model.js"));

var _recipeView = _interopRequireDefault(require("./views/recipeView.js"));

var _icons = _interopRequireDefault(require("url:../img/icons.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const recipeContainer = document.querySelector('.recipe'); // https://forkify-api.herokuapp.com/v2
///////////////////////////////////////
// получаем и отображаем рецепт блюда

const controlRecipe = async function () {
  try {
    const id = window.location.hash.slice(1); // получаем идентификатор без #
    // отображаем спиннер загрузки

    _recipeView.default.renderSpinner(recipeContainer);

    if (!id) return; // если id нет, прерываем
    // получаем данные

    await model.loadRecipe(id); // вызываем метод, получающий и формирующий объект с данными
    // отображаем данные

    _recipeView.default.render(model.state.recipe, _icons.default, recipeContainer);
  } catch (err) {
    console.log(err);
  }
}; // const events = ['hashchange', 'load']; // указываем события, при которых будет срабатывать обработчик
// events.forEach( event => window.addEventListener(event, controlRecipe)); // вешаем обработчик в цикле


const init = function () {
  _recipeView.default.addHandlerRender(controlRecipe); // передаем обработчик событий слушателю

};

init();